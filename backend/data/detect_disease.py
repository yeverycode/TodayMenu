import pandas as pd
import re

# ------------------ 파일 경로 ------------------
input_path = "C:/TodayMenu/gal_menu_data.csv"
output_path = "C:/TodayMenu/gal_menu_data.csv"

# ------------------ 지병별 위험 키워드 정의 ------------------
DISEASE_DANGER_FOODS = {
    "당뇨": [
        "설탕", "시럽", "케이크", "케익", "디저트", "와플", "라떼", "빙수", "단호박죽", "초코", "빵", "젤리", "쿠키",
        "꿀", "달고나", "연유", "버터", "아이스크림", "도넛", "마카롱", "초콜릿바", "잼", "카라멜", "푸딩",
        "팬케이크", "떡", "군고구마", "감자", "옥수수", "밀크티", "베이글", "라면", "우동", "쌀국수", "피자",
        "요거트(가당)", "에너지바", "시리얼", "과일주스", "말린과일", "무화과", "바나나"
    ],
    "고혈압": [
        "짠", "소금", "라면", "찌개", "간장", "국물", "짬뽕", "된장", "김치", "불고기", "짜장",
        "제육", "곰탕", "육개장", "감자탕", "순대국", "돼지국밥", "해장국", "삼겹살", "닭갈비", "마라탕",
        "간장계란밥", "쌈장", "어묵탕", "우동", "짬짜면", "비빔면", "소세지볶음", "햄", "베이컨"
    ],
    "저혈압": [
        "카페인", "커피", "아메리카노", "에스프레소", "콜드브루", "카푸치노", "더치커피", "커피우유",
        "라떼", "녹차", "말차", "콜라", "펩시", "사이다", "스프라이트", "에너지드링크", "몬스터", "바나나", 
        "감자전", "토마토", "수박", "죽", "수박 주스", "떡볶이", "국수", "샐러드", "오이냉국", "수박화채", "포케", "케이크", "도넛"
    ],
    "신장질환": [
        "국물", "젓갈", "김치", "명란", "어묵", "햄", "소세지", "쏘세지", 
        "절임", "찌개", "탕", "꼬치", "불고기", "제육", "소불백", "돼지불백", "닭", "돈까스", "스테이크", 
        "닭도리탕", "순대", "갈비", "양념갈비", "삼겹살", "족발", "보쌈", "차슈", "햄버거", "로스트", "토시살", 
        "껍데기", "꼬들살", "소", "돼지", "계육", "닭갈비", "닭볶음탕", "닭강정", "양념치킨", "후라이드", 
        "곱창", "대창", "막창", "갈매기살", "항정살", "반계탕", "계", "치킨", "소갈비탕", "갈비탕", "곰탕", 
        "설렁탕", "육개장", "순대국", "소머리국밥", "돼지국밥", "꼬들", "목살", "함박", "불백", "삼계탕", 
        "백숙", "닭죽", "육회", "떡갈비", "육사시미", "간", "돼지껍데기", "소시지", "안심", "등심", 
        "채끝", "안창살", "차돌박이", "우설", "육포", "햄버거 패티", "소꼬리", "수육", "바베큐", 
        "그릴드 치킨", "BBQ", "염통", "차돌", "램", "윙", "히레", "깐풍기", "닭발", "마파두부", 
        "두부", "콩", "빵", "파스타", "스파게티", "면", "누들", "크로와상", "라면", "우동", 
        "만두", "피자", "떡국", "짜장", "짬뽕", "튀김", "꽃빵", "탕수육", "샌드위치", "떡볶이", 
        "로제", "수제비", "팬케이크", "러스크", "와플", "베이글", "부대찌개", "마라탕", "국수", 
        "짜장면", "쟁반짜장", "볶음면", "브리또", "타코야키", "비빔면", "칼국수", "잔치국수", 
        "콘크림파스타", "카르보나라", "알리오올리오", "찐빵", "깜파뉴", "까스", "호떡", "도넛", 
        "쿠키", "카스테라", "파이", "토스트", "프레첼", "식빵", "바게트", "꿔바로우", 
        "포카치아", "피타", "나쵸", "타코", "통밀", "밀가루", "핫도그", "가스", "동", 
        "떡", "다시마국수", "쫄면", "동치미국수", "온면", "초계국수", "돈가스", "버거", 
        "라멘", "짜빠구리", "새우장"
    ]
}


# ------------------ 민감 재료 딕셔너리 ------------------
SENSITIVE_INGREDIENTS_MAP = {
    "버섯": ["버섯", "표고", "양송이", "느타리", "팽이", "새송이", "머쉬룸"],
    "고수": ["고수"],
    "내장": ["내장", "곱창", "대창", "막창", "염통"],
    "닭발": ["닭발"],
    "고기": ["고기", "불고기", "제육", "삼겹살", "갈비", "스테이크", "닭", "돼지", "소", "차돌", "안심", "등심","껍데기","갈비","내장", "곱창", "대창", "막창", "염통"],
    "해산물": ["해산물", "해물", "문어", "오징어", "게", "조개", "새우", "홍합", "낙지", "가리비", "멍게", "전복", "굴"]
}

# ------------------ 텍스트 정규화 ------------------
def normalize_text(text):
    if pd.isna(text):
        return ""
    return re.sub(r"[^가-힣a-zA-Z0-9]", "", str(text).lower())

# ------------------ 지병 위험 감지 ------------------
def get_disease_risks(menu_name: str) -> list[str]:
    menu_name = normalize_text(menu_name)
    risks = []
    for disease, keywords in DISEASE_DANGER_FOODS.items():
        for keyword in keywords:
            if normalize_text(keyword) in menu_name:
                risks.append(disease)
                break
    return risks

# ------------------ 민감 재료 감지 ------------------
def extract_sensitive_from_text(text: str) -> list[str]:
    if pd.isna(text):
        return []
    found = []
    for category, keywords in SENSITIVE_INGREDIENTS_MAP.items():
        for keyword in keywords:
            if keyword in text:
                found.append(category)
                break
    return found

# ------------------ 데이터 불러오기 ------------------
df = pd.read_csv(input_path)

# ------------------ 분석 ------------------
df["disease"] = df["menu_name"].apply(get_disease_risks)
df["ingredients"] = df["menu_name"].apply(extract_sensitive_from_text)
df["all_sensitive_ingredients"] = df["ingredients"]  # 현재는 동일. 추후 ingredient 병합 시 분리 가능

# ------------------ 저장 ------------------
df.to_csv(output_path, index=False)
print(f"✅ 분석 및 저장 완료: {output_path}")
